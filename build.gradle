plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.boot' version '3.2.4'
    id 'org.owasp.dependencycheck' version '9.1.0'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.sonarqube' version '5.0.0.4638'
    id "org.flywaydb.flyway" version "9.22.3"
}

group = 'uk.gov.hmcts.juror.scheduler'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly

    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly

    smokeTestImplementation.extendsFrom testImplementation
    smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}

task functional(type: Test) {
    description = "Runs functional tests"
    group = "Verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.15.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    maxFailures = 60
    toolVersion = "6.55.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
    properties {
        property "sonar.projectName", "Juror :: juror-scheduler-api"
        property "sonar.projectKey", "uk.gov.hmcts.juror:juror-scheduler-api"
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = 0
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
    skipConfigurations = [
            "checkstyle",
            "compileOnly",
            "pmd",
            "integrationTest",
            "functionalTest",
            "smokeTest",
            "contractTestRuntimeClasspath",
            "contractTestCompileClasspath"
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    log4JVersion = "2.23.1"
    logbackVersion = "1.5.6"
    springVersion = "3.2.4"
    jwtVersion = "0.12.5"
    lombookVersion = "1.18.32"
}

ext['snakeyaml.version'] = '2.0'

dependencies {

    implementation 'com.github.hmcts:juror-spring-support-library:1.1.2'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springVersion
    implementation group: 'org.springframework.data', name: 'spring-data-commons', version: springVersion


    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.4'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

    implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.4.0'

    // Database, repository
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.hibernate.orm:hibernate-envers:6.4.4.Final'
    implementation 'org.flywaydb:flyway-core:9.22.3'
    testImplementation 'org.testcontainers:postgresql:1.19.7'

    // Documentation, logging
    implementation group: 'org.projectlombok', name: 'lombok', version: lombookVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombookVersion
    testImplementation group: 'org.projectlombok', name: 'lombok', version: lombookVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombookVersion
    implementation 'org.jetbrains:annotations:24.1.0'
    testImplementation 'junit:junit:4.13.2'
    runtimeOnly(group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.5.1')

    // Data Mapping
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'


    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Validation

    // Security
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: jwtVersion
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: jwtVersion
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: jwtVersion


    // Web requests
    implementation 'org.springframework:spring-webflux:6.1.6'

    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }, version: springVersion
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.2"
    testImplementation "org.testcontainers:testcontainers:1.19.7"
    testImplementation "org.testcontainers:junit-jupiter:1.19.7"
}
mainClassName = 'uk.gov.hmcts.juror.scheduler.Application'

bootJar {
    archiveFileName = "juror-scheduler-api.jar"

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

//Flyway must align with application.yml
flyway {
    def dbHost = System.getenv("DB_HOST") ?: "localhost"
    def dbPort = System.getenv("DB_PORT") ?: "5432"
    def dbName = System.getenv("DB_NAME") ?: "scheduler_application"
    def dbUserName = System.getenv("DB_USER_NAME") ?: "system"
    def dbPassword = System.getenv("DB_PASSWORD") ?: "postgres"

    url = "jdbc:postgresql://$dbHost:$dbPort/$dbName"
    user = "$dbUserName"
    password = "$dbPassword"
    defaultSchema = 'scheduler_application'
    table = 'schema_history'
    cleanDisabled = false
    sqlMigrationPrefix = 'scheduler-V'
}
task runAllStyleChecks {
    dependsOn 'checkstyleMain'
    dependsOn 'checkstyleTest'
    dependsOn 'checkstyleIntegrationTest'
    dependsOn 'checkstyleSmokeTest'
    dependsOn 'checkstyleFunctionalTest'

    dependsOn 'pmdMain'
    dependsOn 'pmdTest'
    dependsOn 'pmdIntegrationTest'
    dependsOn 'pmdSmokeTest'
    dependsOn 'pmdFunctionalTest'
}
//project.tasks['integration'].dependsOn flywayClean
//project.tasks['integration'].dependsOn flywayMigrate
