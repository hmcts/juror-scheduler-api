plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '3.1.4'
  id 'org.owasp.dependencycheck' version '8.2.1'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'org.sonarqube' version '4.2.1.3168'
}

group = 'uk.gov.hmcts.juror.scheduler'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = false
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  // temporary change IRF
  maxWarnings = 1000
  toolVersion = '10.12.4'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  // temporary change IRF
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Juror :: juror-scheduler-api"
    property "sonar.projectKey", "uk.gov.hmcts.juror:juror-scheduler-api"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.20.0"
  springVersion = "3.1.4"
  springSeceurityVersion = "6.1.4"
}

ext['snakeyaml.version'] = '2.0'

dependencies {

  //Dependency Overrides
  implementation group: 'org.springframework.security', name: 'spring-security-core', version: springSeceurityVersion
  implementation group: 'org.springframework.security', name: 'spring-security-web', version: springSeceurityVersion
  implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: springSeceurityVersion
  implementation group: 'org.springframework.security', name: 'spring-security-config', version: springSeceurityVersion
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.13'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '10.1.13'

  //End


  implementation files('lib/spring-support-library-0.0.1-plain.jar')

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springVersion

  implementation group: 'org.springframework.data', name: 'spring-data-commons', version: springVersion


  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.3.2'

  // Database, repository
  implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
  implementation 'org.postgresql:postgresql:42.6.0'
  implementation 'org.hibernate.orm:hibernate-envers:6.3.1.Final'

  // Documentation, logging
  implementation 'org.projectlombok:lombok:1.18.26'
  implementation 'org.jetbrains:annotations:20.1.0'
  testImplementation 'junit:junit:4.13.2'
  annotationProcessor 'org.projectlombok:lombok:1.18.26'

  // Data Mapping
  implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'


  compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

  // Validation

  // Security
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


  // Web requests
  implementation 'org.springframework:spring-webflux:6.0.11'

  testImplementation(platform('org.junit:junit-bom:5.9.3'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }, version: springVersion
}

mainClassName = 'uk.gov.hmcts.juror.scheduler.Application'

bootJar {
  archiveFileName = "juror-scheduler-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
